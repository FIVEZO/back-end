# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD with Gradle

on:
  push:
    branches: [ "dev3-1" ]
  pull_request:
    branches: [ "dev3-1" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
   
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    ## create application.properties
    - name: make application.properties
      run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" >> ./application.properties
      shell: bash
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./  
  
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build
   
    - name: Docker build & push
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/firstdocker .
          docker push ${{ secrets.DOCKER_REPO }}/firstdocker

    - name: EC2 Docker Run
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST_DEV3 }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.KEY }}
        port: 22
        script: |
          sudo docker image prune -f
          sudo docker stop $(docker ps -a -q)
          sudo docker rm $(docker ps -a -q)
          sudo docker pull ${{ secrets.DOCKER_REPO }}/firstdocker
          docker-compose up -d
#          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}/firstdocker